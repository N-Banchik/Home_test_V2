/*
 * Home API Test
 *
 * API for performing Mathematical operations on two numbers via POST, with operation specified in HTTP header and JWT authorization.
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Home_test_V1.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class MathOpRequest : IEquatable<MathOpRequest>
    {
        /// <summary>
        /// First number as a string, parsed to double (e.g., &#x27;10.5&#x27;, &#x27;4E2&#x27;).
        /// </summary>
        /// <value>First number as a string, parsed to double (e.g., &#x27;10.5&#x27;, &#x27;4E2&#x27;).</value>
        [Required]

        [DataMember(Name = "Number1")]
        public string Number1 { get; set; }

        /// <summary>
        /// Second number as a string, parsed to double (e.g., &#x27;5.2&#x27;, &#x27;2E3&#x27;).
        /// </summary>
        /// <value>Second number as a string, parsed to double (e.g., &#x27;5.2&#x27;, &#x27;2E3&#x27;).</value>
        [Required]

        [DataMember(Name = "Number2")]
        public string Number2 { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MathOpRequest {\n");
            sb.Append("  Number1: ").Append(Number1).Append("\n");
            sb.Append("  Number2: ").Append(Number2).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((MathOpRequest)obj);
        }

        /// <summary>
        /// Returns true if MathOpRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of MathOpRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MathOpRequest other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    Number1 == other.Number1 ||
                    Number1 != null &&
                    Number1.Equals(other.Number1)
                ) &&
                (
                    Number2 == other.Number2 ||
                    Number2 != null &&
                    Number2.Equals(other.Number2)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (Number1 != null)
                    hashCode = hashCode * 59 + Number1.GetHashCode();
                if (Number2 != null)
                    hashCode = hashCode * 59 + Number2.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(MathOpRequest left, MathOpRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(MathOpRequest left, MathOpRequest right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
